{"_id":"png-js","_rev":"6-2c1a1727c64eca634bd1b1dd0ac713e3","name":"png-js","description":"A PNG decoder in CoffeeScript","dist-tags":{"latest":"0.1.1"},"versions":{"0.1.0":{"name":"png-js","description":"A PNG decoder in CoffeeScript","version":"0.1.0","author":{"name":"Devon Govett","email":"devongovett@gmail.com","url":"http://badassjs.com/"},"repository":{"type":"git","url":"git://github.com/devongovett/png.js.git"},"bugs":{"name":"http://github.com/devongovett/png.js/issues"},"devDependencies":{"coffee-script":">=1.0.1"},"scripts":{"prepublish":"coffee -c png-node.coffee"},"main":"png-node.js","engine":["node >= v0.6.0"],"_npmUser":{"name":"devongovett","email":"devongovett@gmail.com"},"_id":"png-js@0.1.0","dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.9","_defaultsLoaded":true,"dist":{"shasum":"f419b6986e0fea35ca05f0f461926870f9e37db6","tarball":"http://registry.npmjs.org/png-js/-/png-js-0.1.0.tgz"},"maintainers":[{"name":"devongovett","email":"devongovett@gmail.com"}],"directories":{}},"0.1.1":{"name":"png-js","description":"A PNG decoder in CoffeeScript","version":"0.1.1","author":{"name":"Devon Govett","email":"devongovett@gmail.com","url":"http://badassjs.com/"},"repository":{"type":"git","url":"https://github.com/devongovett/png.js.git"},"bugs":"http://github.com/devongovett/png.js/issues","devDependencies":{"coffee-script":">=1.0.1"},"scripts":{"prepublish":"coffee -c png-node.coffee"},"main":"png-node.js","engine":["node >= v0.6.0"],"readme":"png.js\n======\nA PNG decoder in JS for the canvas element or Node.js.\n\n## Browser Usage\nSimply include png.js and zlib.js on your HTML page, create a canvas element, and call PNG.load to load an image.\n\n    <canvas></canvas>\n    <script src=\"zlib.js\"></script>\n    <script src=\"png.js\"></script>\n    <script>\n        var canvas = document.getElementsByTagName('canvas')[0];\n        PNG.load('some.png', canvas);\n    </script>\n    \nThe source code for the browser version resides in `png.js` and also supports loading and displaying animated PNGs.\n    \n## Node.js Usage\nInstall the module using npm\n\n    sudo npm install png-js\n    \nRequire the module and decode a PNG\n\n    var PNG = require('png-js');\n    PNG.decode('some.png', function(pixels) {\n        // pixels is a 1d array of decoded pixel data\n    });\n    \nYou can also call `PNG.load` if you want to load the PNG (but not decode the pixels) synchronously.  If you already\nhave the PNG data in a buffer, simply use `new PNG(buffer)`.  In both of these cases, you need to call `png.decode`\nyourself which passes your callback the decoded pixels as a buffer.  If you already have a buffer you want the pixels\ncopied to, call `copyToImageData` with your buffer and the decoded pixels as returned from `decodePixels`.","_id":"png-js@0.1.1","dist":{"shasum":"1cc7c212303acabe74263ec3ac78009580242d93","tarball":"http://registry.npmjs.org/png-js/-/png-js-0.1.1.tgz"},"maintainers":[{"name":"devongovett","email":"devongovett@gmail.com"}],"directories":{}}},"readme":"png.js\n======\nA PNG decoder in JS for the canvas element or Node.js.\n\n## Browser Usage\nSimply include png.js and zlib.js on your HTML page, create a canvas element, and call PNG.load to load an image.\n\n    <canvas></canvas>\n    <script src=\"zlib.js\"></script>\n    <script src=\"png.js\"></script>\n    <script>\n        var canvas = document.getElementsByTagName('canvas')[0];\n        PNG.load('some.png', canvas);\n    </script>\n    \nThe source code for the browser version resides in `png.js` and also supports loading and displaying animated PNGs.\n    \n## Node.js Usage\nInstall the module using npm\n\n    sudo npm install png-js\n    \nRequire the module and decode a PNG\n\n    var PNG = require('png-js');\n    PNG.decode('some.png', function(pixels) {\n        // pixels is a 1d array of decoded pixel data\n    });\n    \nYou can also call `PNG.load` if you want to load the PNG (but not decode the pixels) synchronously.  If you already\nhave the PNG data in a buffer, simply use `new PNG(buffer)`.  In both of these cases, you need to call `png.decode`\nyourself which passes your callback the decoded pixels as a buffer.  If you already have a buffer you want the pixels\ncopied to, call `copyToImageData` with your buffer and the decoded pixels as returned from `decodePixels`.","maintainers":[{"name":"devongovett","email":"devongovett@gmail.com"}],"time":{"modified":"2012-11-21T23:17:13.830Z","created":"2012-04-07T04:42:44.455Z","0.1.0":"2012-04-07T04:42:45.730Z","0.1.1":"2012-11-21T23:17:13.830Z"},"author":{"name":"Devon Govett","email":"devongovett@gmail.com","url":"http://badassjs.com/"},"repository":{"type":"git","url":"https://github.com/devongovett/png.js.git"},"users":{"bonez":true},"_attachments":{},"_etag":"\"CY56G6ZWV67M8GJ65LKZMKGLH\""}