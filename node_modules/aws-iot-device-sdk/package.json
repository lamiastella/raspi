{
  "name": "aws-iot-device-sdk",
  "description": "AWS IoT Node.js SDK for Embedded Devices",
  "version": "1.0.11",
  "author": {
    "name": "Amazon Web Services",
    "url": "http://aws.amazon.com"
  },
  "homepage": "https://github.com/aws/aws-iot-device-sdk-js",
  "contributors": [
    {
      "name": "Gary Wicker",
      "email": "gkwicker@amazon.com"
    },
    {
      "name": "Frank Lovecchio",
      "email": "flovec@amazon.com"
    },
    {
      "name": "Tristam MacDonald",
      "email": "tristamm@amazon.com"
    },
    {
      "name": "Liusu Zeng",
      "email": "liuszeng@amazon.com"
    }
  ],
  "main": "index.js",
  "engines": {
    "node": ">=0.8.6"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/aws/aws-iot-device-sdk-js.git"
  },
  "bugs": {
    "url": "http://github.com/aws/aws-iot-device-sdk-js/issues"
  },
  "license": "Apache-2.0",
  "keywords": [
    "api",
    "amazon",
    "aws",
    "iot",
    "mqtt"
  ],
  "dependencies": {
    "mqtt": "1.7.3",
    "minimist": "1.2.0",
    "websocket-stream": "^3.1.0",
    "crypto-js": "3.1.6"
  },
  "devDependencies": {
    "gulp": "^3.9.0",
    "gulp-concat": "^2.6.0",
    "gulp-jscs": "^3.0.2",
    "gulp-jshint": "^2.0.0",
    "gulp-mocha": "^2.2.0",
    "jshint": "^2.9.1",
    "jshint-stylish": "^2.1.0",
    "gulp-coverage": "^0.3.38",
    "gulp-beautify": "^2.0.0",
    "sinon": "^1.17.3",
    "rewire": "^2.5.1"
  },
  "scripts": {
    "test": "node ./node_modules/gulp/bin/gulp.js test --verbose",
    "beautify": "node ./node_modules/gulp/bin/gulp.js beautify"
  },
  "readme": "# AWS IoT SDK for Node.js\nThe aws-iot-device-sdk.js package allows developers to write JavaScript \napplications which access the AWS IoT Platform; it is intended for use in\nembedded devices which support Node.js, but it can be used in other Node.js \nenvironments as well.\n\n* [Overview](#overview)\n* [Installation](#install)\n* [Examples](#examples)\n* [API Documentation](#api)\n* [Connection Types](#connections)\n* [Example Programs](#programs)\n* [Troubleshooting](#troubleshooting)\n* [Unit Tests](#unittests)\n* [License](#license)\n* [Support](#support)\n\n<a name=\"overview\"></a>\n## Overview\nThis document provides instructions on how to install and configure the AWS \nIoT device SDK for Node.js and includes examples demonstrating use of the\nSDK APIs.\n\n### MQTT Connection\nThis package is built on top of [mqtt.js](https://github.com/mqttjs/MQTT.js/blob/master/README.md) and provides two classes: 'device'\nand 'thingShadow'.  The 'device' class wraps [mqtt.js](https://github.com/mqttjs/MQTT.js/blob/master/README.md) to provide a\nsecure connection to the AWS IoT platform and expose the [mqtt.js](https://github.com/mqttjs/MQTT.js/blob/master/README.md) interfaces upward.  It provides features to simplify handling of intermittent connections, including progressive backoff retries, automatic re-subscription upon connection, and queued offline publishing with configurable drain rate.\n\n### Thing Shadows\nThe 'thingShadow' class implements additional functionality for accessing Thing Shadows via the AWS IoT\nAPI; the thingShadow class allows devices to update, be notified of changes to,\nget the current state of, or delete Thing Shadows from AWS IoT.  Thing\nShadows allow applications and devices to synchronize their state on the AWS IoT platform.\nFor example, a remote device can update its Thing Shadow in AWS IoT, allowing\na user to view the device's last reported state via a mobile app.  The user\ncan also update the device's Thing Shadow in AWS IoT and the remote device \nwill synchronize with the new state.  The 'thingShadow' class supports multiple \nThing Shadows per mqtt connection and allows pass-through of non-Thing-Shadow\ntopics and mqtt events.\n\n<a name=\"install\"></a>\n## Installation\n\nInstalling with npm:\n\n```sh\nnpm install aws-iot-device-sdk\n```\n\nInstalling from github:\n\n```sh\ngit clone https://github.com/aws/aws-iot-device-sdk-js.git\ncd aws-iot-device-sdk-js\nnpm install\n```\n\n<a name=\"examples\"></a>\n## Examples\n\n### Device Class\n```js\nvar awsIot = require('aws-iot-device-sdk');\n\n//\n// Replace the values of '<YourUniqueClientIdentifier>' and '<YourAWSRegion>'\n// with a unique client identifier and the AWS region you created your\n// certificate in (e.g. 'us-east-1').  NOTE: client identifiers must be\n// unique within your AWS account; if a client attempts to connect with a\n// client identifier which is already in use, the existing connection will\n// be terminated.\n//\nvar device = awsIot.device({\n   keyPath: <YourPrivateKeyPath>,\n  certPath: <YourCertificatePath>,\n    caPath: <YourRootCACertificatePath>,\n  clientId: <YourUniqueClientIdentifier>,\n    region: <YourAWSRegion> \n});\n\n//\n// Device is an instance returned by mqtt.Client(), see mqtt.js for full\n// documentation.\n//\ndevice\n  .on('connect', function() {\n    console.log('connect');\n    device.subscribe('topic_1');\n    device.publish('topic_2', JSON.stringify({ test_data: 1}));\n    });\n\ndevice\n  .on('message', function(topic, payload) {\n    console.log('message', topic, payload.toString());\n  });\n```\n### Thing Shadow Class\n```js\nvar awsIot = require('aws-iot-device-sdk');\n\n//\n// Replace the values of '<YourUniqueClientIdentifier>' and '<YourAWSRegion>'\n// with a unique client identifier and the AWS region you created your\n// certificate in (e.g. 'us-east-1').  NOTE: client identifiers must be\n// unique within your AWS account; if a client attempts to connect with a\n// client identifier which is already in use, the existing connection will\n// be terminated.\n//\nvar thingShadows = awsIot.thingShadow({\n   keyPath: <YourPrivateKeyPath>,\n  certPath: <YourCertificatePath>,\n    caPath: <YourRootCACertificatePath>,\n  clientId: <YourUniqueClientIdentifier>,\n    region: <YourAWSRegion>\n});\n\n//\n// Client token value returned from thingShadows.update() operation\n//\nvar clientTokenUpdate;\n\n//\n// Simulated device values\n//\nvar rval = 187;\nvar gval = 114;\nvar bval = 222;\n\nthingShadows.on('connect', function() {\n//\n// After connecting to the AWS IoT platform, register interest in the\n// Thing Shadow named 'RGBLedLamp'.\n//\n    thingShadows.register( 'RGBLedLamp' );\n//\n// 5 seconds after registering, update the Thing Shadow named \n// 'RGBLedLamp' with the latest device state and save the clientToken\n// so that we can correlate it with status or timeout events.\n//\n// Note that the delay is not required for subsequent updates; only\n// the first update after a Thing Shadow registration using default\n// parameters requires a delay.  See API documentation for the update\n// method for more details.\n//\n    setTimeout( function() {\n//\n// Thing shadow state\n//\n       var rgbLedLampState = {\"state\":{\"desired\":{\"red\":rval,\"green\":gval,\"blue\":bval}}};\n\n       clientTokenUpdate = thingShadows.update('RGBLedLamp', rgbLedLampState  );\n//\n// The update method returns a clientToken; if non-null, this value will\n// be sent in a 'status' event when the operation completes, allowing you\n// to know whether or not the update was successful.  If the update method\n// returns null, it's because another operation is currently in progress and\n// you'll need to wait until it completes (or times out) before updating the \n// shadow.\n//\n       if (clientTokenUpdate === null)\n       {\n          console.log('update shadow failed, operation still in progress');\n       }\n       }, 5000 );\n    });\n\nthingShadows.on('status', \n    function(thingName, stat, clientToken, stateObject) {\n       console.log('received '+stat+' on '+thingName+': '+\n                   JSON.stringify(stateObject));\n//\n// These events report the status of update(), get(), and delete() \n// calls.  The clientToken value associated with the event will have\n// the same value which was returned in an earlier call to get(),\n// update(), or delete().  Use status events to keep track of the\n// status of shadow operations.\n//\n    });\n\nthingShadows.on('delta', \n    function(thingName, stateObject) {\n       console.log('received delta on '+thingName+': '+\n                   JSON.stringify(stateObject));\n    });\n\nthingShadows.on('timeout',\n    function(thingName, clientToken) {\n       console.log('received timeout on '+thingName+\n                   ' with token: '+ clientToken);\n//\n// In the event that a shadow operation times out, you'll receive\n// one of these events.  The clientToken value associated with the\n// event will have the same value which was returned in an earlier\n// call to get(), update(), or delete().\n//\n    });\n\n```\n\n<a name=\"api\"></a>\n##Â API Documentation\n\n  * <a href=\"#device\"><code>awsIot.<b>device()</b></code></a>\n  * <a href=\"#thingShadow\"><code>awsIot.<b>thingShadow()</b></code></a>\n  * <a href=\"#register\"><code>awsIot.thingShadow#<b>register()</b></code></a>\n  * <a href=\"#unregister\"><code>awsIot.thingShadow#<b>unregister()</b></code></a>\n  * <a href=\"#update\"><code>awsIot.thingShadow#<b>update()</b></code></a>\n  * <a href=\"#get\"><code>awsIot.thingShadow#<b>get()</b></code></a>\n  * <a href=\"#delete\"><code>awsIot.thingShadow#<b>delete()</b></code></a>\n  * <a href=\"#publish\"><code>awsIot.thingShadow#<b>publish()</b></code></a>\n  * <a href=\"#subscribe\"><code>awsIot.thingShadow#<b>subscribe()</b></code></a>\n  * <a href=\"#unsubscribe\"><code>awsIot.thingShadow#<b>unsubscribe()</b></code></a>\n  * <a href=\"#end\"><code>awsIot.thingShadow#<b>end()</b></code></a>\n\n-------------------------------------------------------\n<a name=\"device\"></a>\n### awsIot.device(options)\n\nReturns a wrapper for the [mqtt.Client()](https://github.com/mqttjs/MQTT.js/blob/master/README.md#client) \nclass, configured for a TLS connection with the AWS IoT platform and with \narguments as specified in `options`.  The AWSIoT-specific arguments are as \nfollows:\n\n  * `region`: the AWS IoT region you will operate in (default 'us-east-1')\n  * `clientId`: the client ID you will use to connect to AWS IoT\n  * `certPath`: path of the client certificate file\n  * `keyPath`: path of the private key file associated with the client certificate\n  * `caPath`: path of your CA certificate file \n  * `clientCert`: same as `certPath`, but can also accept a buffer containing client certificate data\n  * `privateKey`: same as `keyPath`, but can also accept a buffer containing private key data\n  * `caCert`: same as `caPath`, but can also accept a buffer containing CA certificate data\n  * `protocol`: the connection type, either 'mqtts' (default) or 'wss' (WebSocket/TLS)\n  * `autoResubscribe`: set to 'true' to automatically re-subscribe to topics after reconnection (default 'true')\n  * `offlineQueueing`: set to 'true' to automatically queue published messages while offline (default 'true')\n  * `offlineQueueMaxSize`: enforce a maximum size for the offline message queue (default 0, e.g. no maximum)\n  * `offlineQueueDropBehavior`: set to 'oldest' or 'newest' to define drop behavior on a full queue when offlineQueueMaxSize > 0\n  * `drainTimeMs`: the minimum time in milliseconds between publishes when draining after reconnection (default 250)\n  * `baseReconnectTimeMs`: the base reconnection time in milliseconds (default 1000)\n  * `maximumReconnectTimeMs`: the maximum reconnection time in milliseconds (default 128000)\n  * `minimumConnectionTimeMs`: the minimum time in milliseconds that a connection must be maintained in order to be considered stable (default 20000)\n\nAll certificates and keys must be in PEM format.\n\n`options` also contains arguments specific to mqtt.  See [the mqtt client documentation]\n(https://github.com/mqttjs/MQTT.js/blob/master/README.md#client) for details \nof these arguments.\n\nSupports all events emitted by the [mqtt.Client()](https://github.com/mqttjs/MQTT.js/blob/master/README.md#client) class.\n\n-------------------------------------------------------\n<a name=\"thingShadow\"></a>\n### awsIot.thingShadow(options)\n\nThe `thingShadow` class wraps an instance of the `device` class with additional\nfunctionality to operate on Thing Shadows via the AWS IoT API.  The\narguments in `options` include all those in the [device class](#device), with \nthe addition of the following arguments specific to the `thingShadow` class:\n\n* `operationTimeout`: the timeout for thing operations (default 10 seconds)\n\nSupports all events emitted by the [mqtt.Client()](https://github.com/mqttjs/MQTT.js/blob/master/README.md#client) class; however, the semantics for the \n`message` event are slightly different and additional events are available\nas described below:\n\n### Event `'message'`\n\n`function(topic, message) {}`\n\nEmitted when a message is received on a topic not related to any Thing Shadows:\n* `topic` topic of the received packet\n* `message` payload of the received packet\n\n### Event `'status'`\n\n`function(thingName, stat, clientToken, stateObject) {}`\n\nEmitted when an operation `update|get|delete` completes.\n* `thingName` name of the Thing Shadow for which the operation has completed\n* `stat` status of the operation `accepted|rejected`\n* `clientToken` the operation's clientToken\n* `stateObject` the stateObject returned for the operation\n\nApplications can use clientToken values to correlate status events with the\noperations that they are associated with by saving the clientTokens returned\nfrom each operation.\n\n### Event `'delta'`\n\n`function(thingName, stateObject) {}`\n\nEmitted when a delta has been received for a registered Thing Shadow.\n* `thingName` name of the Thing Shadow that has received a delta\n* `stateObject` the stateObject returned for the operation\n\n### Event `'foreignStateChange'`\n\n`function(thingName, operation, stateObject) {}`\n\nEmitted when a different client's update or delete operation is accepted on\nthe shadow.\n\n* `thingName` name of the Thing Shadow for which the operation has completed\n* `operation` operation performed by the foreign client `update|delete`\n* `stateObject` the stateObject returned for the operation\n\nThis event allows an application to be aware of successful update or\ndelete operations performed by different clients.\n\n### Event `'timeout'`\n\n`function(thingName, clientToken) {}`\n\nEmitted when an operation `update|get|delete` has timed out.\n* `thingName` name of the Thing Shadow that has received a timeout\n* `clientToken` the operation's clientToken\n\nApplications can use clientToken values to correlate timeout events with the\noperations that they are associated with by saving the clientTokens returned\nfrom each operation.\n\n-------------------------------------------------------\n<a name=\"register\"></a>\n### awsIot.thingShadow#register(thingName, [options] )\n\nRegister interest in the Thing Shadow named `thingName`.  The thingShadow class will\nsubscribe to any applicable topics, and will fire events for the Thing Shadow\nuntil [awsIot.thingShadow#unregister()](#unregister) is called with `thingName`.  `options`\ncan contain the following arguments to modify how this Thing Shadow is processed:\n\n* `ignoreDeltas`: set to `true` to not subscribe to the `delta` sub-topic for this Thing Shadow; used in cases where the application is not interested in changes (e.g. update only.) (default `false`)\n* `persistentSubscribe`: set to `false` to unsubscribe from all operation sub-topics while not performing an operation (default `true`)\n* `discardStale`: set to `false` to allow receiving messages with old version numbers (default `true`)\n* `enableVersioning`: set to `true` to send version numbers with shadow updates (default `true`)\n\nThe `persistentSubscribe` argument allows an application to get faster operation\nresponses at the expense of potentially receiving more irrelevant response\ntraffic (i.e., response traffic for other clients who have registered interest\nin the same Thing Shadow).  When `persistentSubscribe` is set to `false`, operation\nsub-topics are only subscribed to during the scope of that operation;\nnote that in this mode, update, get, and delete operations will be much slower;\nhowever, the application will be less likely to receive irrelevant response traffic.\n\nThe `discardStale` argument allows applications to receive messages which have\nobsolete version numbers.  This can happen when messages are received out-of-order;\napplications which set this argument to `false` should use other methods to\ndetermine how to treat the data (e.g. use a time stamp property to know how old/stale\nit is).\n\nIf `enableVersioning` is set to true, version numbers will be sent with each operation.\nAWS IoT maintains version numbers for each shadow, and will reject operations which \ncontain the incorrect version; in applications where multiple clients update the same\nshadow, clients can use versioning to avoid overwriting each other's changes.\n\n-------------------------------------------------------\n<a name=\"unregister\"></a>\n### awsIot.thingShadow#unregister(thingName)\n\nUnregister interest in the Thing Shadow named `thingName`.  The thingShadow class\nwill unsubscribe from all applicable topics and no more events will be fired\nfor `thingName`.\n\n-------------------------------------------------------\n<a name=\"update\"></a>\n### awsIot.thingShadow#update(thingName, stateObject)\n\nUpdate the Thing Shadow named `thingName` with the state specified in the \nJavaScript object `stateObject`.  `thingName` must have been previously \nregistered\nusing [awsIot.thingShadow#register()](#register).  The thingShadow class will subscribe\nto all applicable topics and publish `stateObject` on the <b>update</b> sub-topic.\n\nThis function returns a `clientToken`, which is a unique value associated with\nthe update operation.  When a 'status' or 'timeout' event is emitted, \nthe `clientToken` will be supplied as one of the parameters, allowing the \napplication to keep track of the status of each operation.  The caller may\ncreate their own `clientToken` value; if `stateObject` contains a `clientToken`\nproperty, that will be used rather than the internally generated value.  Note\nthat it should be of atomic type (i.e. numeric or string).  This function\nreturns 'null' if an operation is already in progress.\n\n-------------------------------------------------------\n<a name=\"get\"></a>\n### awsIot.thingShadow#get(thingName, [clientToken])\n\nGet the current state of the Thing Shadow named `thingName`, which must have\nbeen previously registered using [awsIot.thingShadow#register()](#register).  The \nthingShadow class will subscribe to all applicable topics and publish on the \n<b>get</b> sub-topic.\n\nThis function returns a `clientToken`, which is a unique value associated with\nthe get operation.  When a 'status or 'timeout' event is emitted, \nthe `clientToken` will be supplied as one of the parameters, allowing the \napplication to keep track of the status of each operation.  The caller may\nsupply their own `clientToken` value (optional); if supplied, the value of\n`clientToken` will be used rather than the internally generated value.  Note\nthat this value should be of atomic type (i.e. numeric or string).  This\nfunction returns 'null' if an operation is already in progress.\n\n-------------------------------------------------------\n<a name=\"delete\"></a>\n### awsIot.thingShadow#delete(thingName, [clientToken])\n\nDelete the Thing Shadow named `thingName`, which must have been previously\nregistered using [awsIot.thingShadow#register()](#register).  The thingShadow class\nwill subscribe to all applicable topics and publish on the <b>delete</b>\nsub-topic.\n\nThis function returns a `clientToken`, which is a unique value associated with\nthe delete operation.  When a 'status' or 'timeout' event is emitted, \nthe `clientToken` will be supplied as one of the parameters, allowing the \napplication to keep track of the status of each operation.  The caller may\nsupply their own `clientToken` value (optional); if supplied, the value of\n`clientToken` will be used rather than the internally generated value.  Note\nthat this value should be of atomic type (i.e. numeric or string).  This\nfunction returns 'null' if an operation is already in progress.\n\n-------------------------------------------------------\n<a name=\"publish\"></a>\n### awsIot.thingShadow#publish(topic, message, [options], [callback])\n\nIdentical to the [mqtt.Client#publish()](https://github.com/mqttjs/MQTT.js/blob/master/README.md#publish) \nmethod, with the restriction that the topic may not represent a Thing Shadow.\nThis method allows the user to publish messages to topics on the same connection\nused to access Thing Shadows.\n\n-------------------------------------------------------\n<a name=\"subscribe\"></a>\n### awsIot.thingShadow#subscribe(topic, [options], [callback])\n\nIdentical to the [mqtt.Client#subscribe()](https://github.com/mqttjs/MQTT.js/blob/master/README.md#subscribe) \nmethod, with the restriction that the topic may not represent a Thing Shadow.\nThis method allows the user to subscribe to messages from topics on the same \nconnection used to access Thing Shadows.\n\n-------------------------------------------------------\n<a name=\"unsubscribe\"></a>\n### awsIot.thingShadow#unsubscribe(topic, [options], [callback])\n\nIdentical to the [mqtt.Client#unsubscribe()](https://github.com/mqttjs/MQTT.js/blob/master/README.md#unsubscribe) \nmethod, with the restriction that the topic may not represent a Thing Shadow.\nThis method allows the user to unsubscribe from topics on the same \nused to access Thing Shadows.\n\n-------------------------------------------------------\n<a name=\"end\"></a>\n### awsIot.thingShadow#end([force], [callback])\n\nInvokes the [mqtt.Client#end()](https://github.com/mqttjs/MQTT.js/blob/master/README.md#end) \nmethod on the MQTT connection owned by the `thingShadow` class.  The `force` \nand `callback` parameters are optional and identical in function to the \nparameters in the [mqtt.Client#end()](https://github.com/mqttjs/MQTT.js/blob/master/README.md#end) method.\n\n<a name=\"connections\"></a>\n## Connection Types\n\nThis SDK supports two types of connections to the AWS IoT platform:\n\n* MQTT over TLS with mutual certificate authentication using port 8883\n* MQTT over WebSocket/TLS with SigV4 authentication using port 443\n\nThe default connection type is MQTT over TLS with mutual certificate authentication; to\nconfigure a WebSocket/TLS connection, set the `protocol` option to `wss` when instantiating\nthe [awsIot.device()](#device) or [awsIot.thingShadow()](#thingShadow) classes.\n\n<a name=\"programs\"></a>\n## Example Programs\n\nThe 'examples' directory contains several programs which demonstrate usage\nof the AWS IoT APIs:\n\n* device-example.js: demonstrate simple MQTT publish and subscribe \noperations.\n\n* [echo-example.js](#echoExample): test Thing Shadow operation by echoing all delta \nstate updates to the update topic; used in conjunction with the [AWS\nIoT Console](https://console.aws.amazon.com/iot) to verify connectivity \nwith the AWS IoT platform.\n\n* thing-example.js: use a Thing Shadow to automatically synchronize\nstate between a simulated device and a control application.\n\n* thing-passthrough-example.js: demonstrate use of a Thing Shadow with\npasthrough of standard MQTT publish and subscribe messages.\n\n* temperature-control/temperature-control.js: an interactive device simulation which uses\nThing Shadows.\n\nThe example programs use command line parameters to set options.  To see\nthe available options, run the program and specify the '-h' option as\nfollows:\n\n```sh\nnode examples/<EXAMPLE-PROGRAM> -h\n```\n**NOTE:**  If you didn't create your certificate in the default region ('us-east-1'), you'll\nneed to specify the region (e.g., 'us-west-2') that you created your certificate in.  When\nusing the example programs, this can be done with the '-g' command line option.\n<a name=\"websockets\"></a>\n### WebSocket Configuration \n\nThe example programs can be configured to use a WebSocket/TLS connection to\nthe AWS IoT platform by adding '--protocol=wss' to the command line to\noverride the default setting of 'mqtts'.\n\n```sh\n  -P, --protocol=PROTOCOL          connect using PROTOCOL (mqtts|wss)\n```\n\nWhen using a WebSocket/TLS connection, you'll need to set the following environment\nvariables:\n\n```sh\n  export AWS_ACCESS_KEY_ID=[a valid AWS access key ID]\n  export AWS_SECRET_ACCESS_KEY=[a valid AWS secret access key]\n```\n\nThe values of `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` must contain valid\nAWS Identity and Access Management (IAM) credentials.  For more information about AWS\nIAM, [visit the AWS IAM home page.](https://aws.amazon.com/iam/)\n\n<a name=\"certificates\"></a>\n### Certificate Configuration\n\nWhen not configured to use a WebSocket/TLS connection, the example programs \nrequire a client certificate and private key (created using either the [AWS\nIoT Console](https://console.aws.amazon.com/iot) or the \n[AWS IoT CLI](https://aws.amazon.com/cli/)) in order to authenticate with\nAWS IoT.  Each example program uses command line options to specify the\nnames and/or locations of certificates as follows:\n\n#### Specify a directory containing default-named certificates\n\n```sh\n  -f, --certificate-dir=DIR        look in DIR for certificates\n```\n\nThe --certificate-dir (-f) option will read all certificate and key files from the\ndirectory specified.  Default certificate/key file names are as follows:\n\n* certificate.pem.crt: your AWS IoT certificate\n* private.pem.key: the private key associated with your AWS IoT certificate\n* root-CA.crt: the root CA certificate [(available from Symantec here)](https://www.symantec.com/content/en/us/enterprise/verisign/roots/VeriSign-Class%203-Public-Primary-Certification-Authority-G5.pem)\n\n#### Specify certificate names and locations individually\n\n```sh\n  -k, --private-key=FILE           use FILE as private key\n  -c, --client-certificate=FILE    use FILE as client certificate\n  -a, --ca-certificate=FILE        use FILE as CA certificate\n```\n\nThe '-f' (certificate directory) option can be combined with these so that\nyou don't have to specify absolute pathnames for each file.\n\n<a href=\"configurationFile></a>\n#### Use a configuration file\n\nThe [AWS IoT Console](https://console.aws.amazon.com/iot) can generate JSON \nconfiguration data specifying the parameters required to connect a device\nto the AWS IoT Platform.  The JSON configuration data includes pathnames\nto certificates, the hostname and port number, etc...  The command line \noption '--configuration-file (-F)' is used when reading parameters from a\nconfiguration file.\n\n```sh\n  -F, --configuration-file=FILE    use FILE (JSON format) for configuration\n```\n\nThe configuration file is in JSON format, and may contain the following\nproperties:\n\n* host - the host name to connect to\n* port - the port number to use when connecting to the host (8883 for AWS IoT with client certificate)\n* clientId - the client ID to use when connecting\n* privateKey - file containing the private key\n* clientCert - file containing the client certificate\n* caCert - file containing the CA certificate\n* thingName - thing name to use\n\n##### Tips for using JSON configuration files\n* _The '-f' (certificate directory) and '-F' (configuration file) options\ncan be combined so that you don't have to use absolute pathnames in the\nconfiguration file._\n* _When using a configuration file to run any of the example programs other \nthan [echo-example.js](#echoExample), you **must** specify different client \nIDs for each process using the '-i' command line option._\n\n### device-example.js\n\ndevice-example.js is run as two processes which communicate with one\nanother via the AWS IoT platform using MQTT publish and subscribe.\nThe command line option '--test-mode (-t)' is used to set which role\neach process performs.  It's easiest to run each process in its own\nterminal window so that you can see the output generated by each.  Note\nthat in the following examples, all certificates are located in the\n~/certs directory and have the default names as specified in the \n[Certificate Configuration section](#certificates).\n\n#### _Terminal Window 1_\n```sh\nnode examples/device-example.js -f ~/certs --test-mode=1\n```\n\n#### _Terminal Window 2_\n```sh\nnode examples/device-example.js -f ~/certs --test-mode=2\n```\n\n### thing-example.js\nSimilar to device-example.js, thing-example.js is also run as two \nprocesses which communicate with one another via the AWS IoT platform.\nthing-example.js uses a Thing Shadow to synchronize state between the\ntwo processes, and the command line option '--test-mode (-t)' is used\nto set which role each process performs.  As with device-example.js, \nit's best to run each process in its own terminal window or on separate\nhosts.  In this example, the example programs are configured to use\nWebSocket/TLS connections to the AWS IoT platform as specified in the\n[WebSocket Configuration](#websockets).\n\n#### _Terminal Window 1_\n```sh\nnode examples/thing-example.js -P=wss --test-mode=1\n```\n\n#### _Terminal Window 2_\n```sh\nnode examples/thing-example.js -P=wss --test-mode=2\n```\n\n### thing-passthrough-example.js\nSimilar to thing-example.js, thing-passthrough-example.js is also run \nas two processes which communicate with one another via the AWS IoT platform.\nthing-passthrough-example.js uses a Thing Shadow to synchronize state\nfrom one process to another, and uses MQTT publish/subscribe to send\ninformation in the other direction.  The command line option '--test-mode (-t)'\nis used to set which role each process performs.  As with thing-example.js, \nit's best to run each process in its own terminal window.  Note \nthat in the following examples, all certificates are located in the\n~/certs directory and have the default names as specified in the \n[Certificate Configuration section](#certificates).\n\n#### _Terminal Window 1_\n```sh\nnode examples/thing-passthrough-example.js -f ~/certs --test-mode=1\n```\n\n#### _Terminal Window 2_\n```sh\nnode examples/thing-passthrough-example.js -f ~/certs --test-mode=2\n```\n\n<a name=\"echoExample\"></a>\n### echo-example.js\necho-example.js is used in conjunction with the \n[AWS IoT Console](https://console.aws.amazon.com/iot) to verify \nconnectivity with the AWS IoT platform and to perform interactive \nobservation of Thing Shadow operation.  In the following example, the\nprogram is run using the configuration file '../config.json', and\nthe certificates are located in the '~/certs' directory.  Here, the\n'-f' (certificate directory) and '-F' (configuration file) options\nare combined so that the configuration file doesn't need to contain\nabsolute pathnames.\n\n```sh\nnode examples/echo-example.js -F ../config.json -f ~/certs --thing-name testThing1\n```\n\n<a name=\"temp-control\"></a>\n### temperature-control.js\ntemperature-control.js is an interactive simulation which demonstrates\nhow Thing Shadows can be used to easily synchronize applications \nand internet-connected devices.  \n\nLike thing-example.js, temperature-control.js runs in two\nseparate terminal windows and is configured via command-line options;\nin the following example, all certificates are located in the ~/certs\ndirectory and have the default names as specified in the \n[Certificate Configuration section](#certificates).  The process running\nwith '--test-mode=2' simulates an internet-connected temperature control \ndevice, and the process running with '--test-mode=1' simulates a mobile\napplication which is monitoring/controlling it.  The processes may be\nrun on different hosts if desired.\n\n#### _Installing Dependencies_\ntemperature-control.js\nuses the [blessed.js](https://github.com/chjj/blessed) and [blessed-contrib.js](https://github.com/yaronn/blessed-contrib) libraries to provide an \ninteractive terminal interface; it looks best on an 80x25 terminal with a\nblack background and white or green text and requires UTF-8 character\nencoding.  You'll need to install these libraries in the examples/temperature-control\ndirectory as follows:\n\n```sh\ncd examples/temperature-control\nnpm install\n```\n\n#### _Running the Simulation - Terminal Window 1_\n```sh\nnode examples/temperature-control/temperature-control.js -f ~/certs --test-mode=1\n```\n![temperature-control.js, 'mobile application' mode](https://s3.amazonaws.com/aws-iot-device-sdk-js-supplemental/images/temperature-control-mobile-app-mode.png)\n\n#### _Running the Simulation - Terminal Window 2_\n```sh\nnode examples/temperature-control/temperature-control.js -f ~/certs --test-mode=2\n```\n![temperature-control.js, 'device' mode](https://s3.amazonaws.com/aws-iot-device-sdk-js-supplemental/images/temperature-control-device-mode.png)\n\n#### _Using the simulation_\nThe simulated temperature control device has two controls; _Setpoint_ and\n_Status_.  _Status_ controls whether or not the device is active, and\n_Setpoint_ controls the interior temperature the device will attempt to \nachieve.  In addition, the device reports the current interior and exterior\ntemperatures as well as its operating state (_heating_, _cooling_, or\n_stopped_).\n\nTwo Thing Shadows are used to connect the simulated device and mobile\napplication; one contains the controls and the other contains the \nmeasured temperatures and operating state.  Both processes can update the\ncontrols, but only the device can update the measured temperatures and\nthe operating state.\n\nControlling the simulation is done using the <kbd>up</kbd>, \n<kbd>down</kbd>, <kbd>left</kbd>, <kbd>right</kbd>, and \n<kbd>Enter</kbd> keys as follows:\n\n* <kbd>up</kbd> increase the Setpoint\n* <kbd>down</kbd> decrease the Setpoint\n* <kbd>left</kbd> move left on the menu bar\n* <kbd>right</kbd> move right on the menu bar\n* <kbd>Enter</kbd> select the current menu option\n\n##### Operating State\n\nThe operating state of the device is indicated by the color of the\nInterior temperature field as follows:\n\n* Red: _heating_\n* Cyan: _cooling_\n* White: _stopped_\n\nThe following example shows the temperature control simulation in 'device' mode\nwhile the operating state is 'heating'.\n\n![temperature-control.js, 'device' mode, 'heating' operating state](https://s3.amazonaws.com/aws-iot-device-sdk-js-supplemental/images/temperature-control-device-mode-heating.png)\n\n##### Log\n\nThe log window displays events of interest, e.g. network connectivity,\n_Status_ toggles, re-synchronization with the Thing Shadow, etc...\n\n##### Menu Options\n\n* Mode: Toggle the device _Status_.  _Status_ can be controlled from both\nthe simulated device and the mobile application.\n* Network: Toggle the network connectivity of the device or mobile \napplication; this can be used to observe how both sides re-synchronize \nwhen connectivity is restored.\n\nIn this example, the mobile application is disconnected from the network.  Although it has\nrequested that the Setpoint be lowered to 58 degrees, the command can't be sent to\nthe device as there is no network connectivity, so the operating state still shows as\n'stopped'.  When the mobile application is reconnected to the network, it will attempt\nto update the Thing Shadow for the device's controls; if no control changes have been\nmade on the device side during the disconnection period, the device will synchronize to\nthe mobile application's requested state; otherwise, the mobile application will re-\nsynchronize to the device's current state.\n\n![temperature-control.js, 'mobile application' mode, network disconnected](https://s3.amazonaws.com/aws-iot-device-sdk-js-supplemental/images/temperature-control-mobile-app-mode-network-disconnected.png)\n\n##### Exiting the Simulation\n\nThe simulation can be exited at any time by pressing <kbd>q</kbd>, \n<kbd>Ctrl</kbd>+<kbd>c</kbd>, or by selecting 'exit' on the menu bar.\n\n<a name=\"troubleshooting\"></a>\n## Troubleshooting\n\nIf you have problems connecting to the AWS IoT Platform when using this SDK or\nrunning the example programs, there are a few things to check:\n\n* _Region Mismatch_:  If you didn't create your \ncertificate in the default region ('us-east-1'), you'll need to specify \nthe region (e.g., 'us-west-2') that you created your certificate in.  When\nusing the example programs, this can be done with the '-g' command line option.\n* _Duplicate Client IDs_:  Within your AWS account, the AWS IoT platform\nwill only allow one connection per client ID.  Many of the example programs\nrun as two processes which communicate with one another.  If you don't\nspecify a client ID, the example programs will generate random client IDs,\nbut if you are using a [JSON configuration file](#configurationFile), you'll\nneed to explictly specify client IDs for both programs using the '-i' command\nline option.\n\n<a name=\"unittests\"></a>\n## Unit Tests\n\nThis package includes unit tests which can be run as follows:\n\n```sh\nnpm test\n```\n\nRunning the unit tests will also generate code coverage data in the 'reports'\ndirectory.\n\n<a name=\"license\"></a>\n## License\n\nThis SDK is distributed under the [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0), see LICENSE.txt and NOTICE.txt for more information.\n<a name=\"suport\"></a>\n## Support\nIf you have technical questions about AWS IoT Device SDK, use the [AWS IoT Forum](https://forums.aws.amazon.com/forum.jspa?forumID=210).\nFor any other questions on AWS IoT, contact [AWS Support](https://aws.amazon.com/contact-us).\n",
  "readmeFilename": "README.md",
  "gitHead": "5ea649e073d169c9da1c3c980648dcbf8b59dceb",
  "_id": "aws-iot-device-sdk@1.0.11",
  "_shasum": "b6fc0658ef9198286a33e2f15717d11b6a271329",
  "_from": "aws-iot-device-sdk-js",
  "_resolved": "file:aws-iot-device-sdk-js"
}
